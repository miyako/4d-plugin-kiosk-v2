/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-kiosk.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : kiosk
 #	author : miyako
 #	2022/07/06
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-kiosk.h"

namespace KIOSK
{
    kiosk_mode_t mode = kiosk_mode_off;

#if VERSIONWIN
    HHOOK hTaskMgr = NULL;
#else
    NSApplicationPresentationOptions options = 0;
#endif
}

static bool wasMDI = true;

#if VERSIONWIN

static HWND getMDI() {

	PA_ulong32 version = PA_Get4DVersion();

	if (version >= 16)
		return (HWND)PA_GetMainWindowHWND();

	// Altura MAc2Win does not allow multiple instances of the same app
	// we can assume that the window class is the folder name of the application

	HWND mdi = NULL;
	wchar_t path[_MAX_PATH] = { 0 };
	wchar_t * applicationPath = wcscpy(path, (const wchar_t *)PA_GetApplicationFullPath().fString);

	//remove file name (4D.exe)
	PathRemoveFileSpec(path);
	//check instance as well, to be sure
	HINSTANCE h = (HINSTANCE)PA_Get4DHInstance();

	do {
		mdi = FindWindowEx(NULL, mdi, (LPCTSTR)path, NULL);
		if (mdi)
		{
			if (h == (HINSTANCE)GetWindowLongPtr(mdi, GWLP_HINSTANCE))
			{
				break;
			}
		}
	} while (mdi);

	wasMDI = (mdi != NULL);

	return mdi;
}

#endif

#if VERSIONWIN
LRESULT CALLBACK _CALLBACK_WH_KEYBOARD_LL(int code, WPARAM wParam, LPARAM lParam) {
    
    KBDLLHOOKSTRUCT *pkh = (KBDLLHOOKSTRUCT *) lParam;
    BOOL bCtrlKeyDown = FALSE;
    BOOL bAltKeyDown = FALSE;
    BOOL bShiftKeyDown = FALSE;
    
    if(code == HC_ACTION)
    {
        bCtrlKeyDown = GetAsyncKeyState(VK_CONTROL)>>((sizeof(SHORT) * 8) - 1);
        bShiftKeyDown = GetAsyncKeyState(VK_SHIFT)>>((sizeof(SHORT) * 8) - 1);
        bAltKeyDown = pkh->flags & LLKHF_ALTDOWN;
        
        if((pkh->vkCode == VK_ESCAPE && bCtrlKeyDown) ||                // Ctrl+Esc
       (pkh->vkCode == VK_TAB && bAltKeyDown) ||                        // Alt+Tab, Alt+Shift+Tab
       (pkh->vkCode == VK_ESCAPE && bAltKeyDown) ||                // Alt+Esc, Alt+Shift+Esc
       (pkh->vkCode == VK_ESCAPE && bCtrlKeyDown && bShiftKeyDown)||    // Ctrl+Shift+Esc
       (pkh->vkCode == VK_DELETE && bCtrlKeyDown && bAltKeyDown)||        // Ctrl+Alt+Delete    (can't catch hotkeys this way...)
       (pkh->vkCode == VK_F4 && bAltKeyDown)||                            // Alt+F4
       (pkh->vkCode == VK_LWIN || pkh->vkCode==VK_RWIN))    // Windows
        {
            return 1;
        }
    }
    return CallNextHookEx(KIOSK::hTaskMgr, code, wParam, lParam);
}
#endif

static void hideTaskTray() {
#if VERSIONWIN
    HWND hTrayWnd = FindWindow(L"Shell_TrayWnd", NULL);
    if(hTrayWnd)
    {
        ShowWindow(hTrayWnd, SW_HIDE);
        InvalidateRect(hTrayWnd, NULL, TRUE);
        UpdateWindow(GetDesktopWindow());
    }
#endif
}

static void showTaskTray() {
#if VERSIONWIN
    HWND hTrayWnd = FindWindow(L"Shell_TrayWnd", NULL);
    if(hTrayWnd)
    {
        ShowWindow(hTrayWnd, SW_SHOW);
        UpdateWindow(GetDesktopWindow());
    }
#endif
}

static void hideMainWindowTitleBar() {
#if VERSIONWIN
    HWND hMDI = getMDI();
    
    if(hMDI)
    {
        SetWindowLong(hMDI, GWL_STYLE, GetWindowLong (hMDI, GWL_STYLE) | WS_POPUP);
        SetWindowLong(hMDI, GWL_STYLE, GetWindowLong (hMDI, GWL_STYLE) &~ WS_CAPTION);
        SetWindowLong(hMDI, GWL_STYLE, GetWindowLong (hMDI, GWL_STYLE) &~ WS_SYSMENU);
        SetWindowPos (hMDI, NULL, 0, 0, 0, 0, SWP_NOMOVE
                      | SWP_NOSIZE
                      | SWP_NOZORDER
                      | SWP_FRAMECHANGED);
        ShowWindow(hMDI, SW_MAXIMIZE);
        UpdateWindow(GetDesktopWindow());
    }
#endif
}

static void showMainWindowTitleBar() {
#if VERSIONWIN
    HWND hMDI = getMDI();
    
    if(hMDI)
    {
        SetWindowLong(hMDI, GWL_STYLE, GetWindowLong (hMDI, GWL_STYLE) &~ WS_POPUP);
        SetWindowLong(hMDI, GWL_STYLE, GetWindowLong (hMDI, GWL_STYLE) | WS_CAPTION);
        SetWindowLong(hMDI, GWL_STYLE, GetWindowLong (hMDI, GWL_STYLE) | WS_SYSMENU);
        SetWindowPos (hMDI, NULL, 0, 0, 0, 0, SWP_NOMOVE
                      | SWP_NOSIZE
                      | SWP_NOZORDER
                      | SWP_FRAMECHANGED);
        ShowWindow(hMDI, SW_RESTORE);
        UpdateWindow(GetDesktopWindow());
    }
#endif
}

static void disableTaskSwitching() {
#if VERSIONWIN
    HKEY hk;
    
    DWORD val = 1;
    
    if(!KIOSK::hTaskMgr) {
        KIOSK::hTaskMgr = SetWindowsHookEx(WH_KEYBOARD_LL,
                                           (HOOKPROC)_CALLBACK_WH_KEYBOARD_LL,
                                           (HINSTANCE)GetModuleHandle(0), 0);
    }
    
    if(KIOSK::hTaskMgr) {
        if(RegOpenKey(HKCU, KEY_DisableTaskMgr, &hk) != ERROR_SUCCESS)
            RegCreateKey(HKCU, KEY_DisableTaskMgr, &hk);
        RegSetValueEx(hk, VAL_DisableTaskMgr, 0, REG_DWORD, (BYTE*)&val, sizeof(val));
    }
#else
    NSApplication *sharedApplication = [NSApplication sharedApplication];
    
    KIOSK::options = sharedApplication.presentationOptions;
    
    sharedApplication.presentationOptions =
    NSApplicationPresentationHideMenuBar|NSApplicationPresentationHideDock|
    NSApplicationPresentationDisableAppleMenu|
    NSApplicationPresentationDisableProcessSwitching|
    NSApplicationPresentationDisableForceQuit|
    NSApplicationPresentationDisableSessionTermination|
    NSApplicationPresentationDisableHideApplication;
#endif
}

static void enableTaskSwitching() {
#if VERSIONWIN
    HKEY hk;
    
    if(KIOSK::hTaskMgr) {
        UnhookWindowsHookEx(KIOSK::hTaskMgr);
        KIOSK::hTaskMgr = NULL;
    }
    
    if(!KIOSK::hTaskMgr) {
        if(RegOpenKey(HKCU, KEY_DisableTaskMgr, &hk) != ERROR_SUCCESS)
            RegCreateKey(HKCU, KEY_DisableTaskMgr, &hk);
        RegDeleteValue(hk, VAL_DisableTaskMgr);
    }
#else
    NSApplication *sharedApplication = [NSApplication sharedApplication];
    
    sharedApplication.presentationOptions = KIOSK::options;
#endif
}

#pragma mark -

static bool isSDI() {
    
#if VERSIONWIN
    
    PA_Variable args[5];

    args[0] = PA_CreateVariable(eVK_Longint);
    args[1] = PA_CreateVariable(eVK_Longint);
    args[2] = PA_CreateVariable(eVK_Longint);
    args[3] = PA_CreateVariable(eVK_Longint);
    args[4] = PA_CreateVariable(eVK_Longint);
    
    PA_SetLongintVariable(&args[4], (PA_long32)-1);

    PA_ExecuteCommandByID(443 /*GET WINDOW RECT*/, args, 5);

    wasMDI = !(
       (PA_GetLongintVariable(args[0]) == 0)
    && (PA_GetLongintVariable(args[1]) == 0)
    && (PA_GetLongintVariable(args[2]) == 0)
    && (PA_GetLongintVariable(args[3]) == 0));
    
    /* the variable belongs to 4D, no need to PA_ClearVariable (I think) */

#endif
    
    return !wasMDI;
}

static void OnExit() {
#if VERSIONWIN
    if(KIOSK::mode == kiosk_mode_on) {
        showTaskTray();
        enableTaskSwitching();
        showMainWindowTitleBar();
    }
#endif
}

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
            case kDeinitPlugin:
                if (wasMDI) {
                    //too late to call isSDI() which depends on PA_ExecuteCommandByID
                    PA_RunInMainProcess((PA_RunInMainProcessProcPtr)OnExit, NULL);
                }
                break;
                
			// --- kiosk
            
			case 1 :
                PA_RunInMainProcess((PA_RunInMainProcessProcPtr)KIOSK_SET_MODE, params);
				break;
            case 2 :
                KIOSK_Get_mode(params);
                break;
        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void KIOSK_SET_MODE(PA_PluginParameters params) {
    
    kiosk_mode_t mode = (kiosk_mode_t)PA_GetLongParameter(params, 1);
    
    if(KIOSK::mode != mode) {
        switch (mode) {

            case kiosk_mode_off:

                showTaskTray();
                enableTaskSwitching();
                showMainWindowTitleBar();

                break;

            case kiosk_mode_on:

                hideTaskTray();
                disableTaskSwitching();
                hideMainWindowTitleBar();

                break;
        }
        KIOSK::mode = mode;
    }
}

void KIOSK_Get_mode(PA_PluginParameters params) {

    PA_ReturnLong(params, KIOSK::mode);
    
}
